package chap11.EX01;

/* final : 마지막의 의미로 사용함.
 * - 필드명, 지역 변수명 등에 달라 해당 대상을 상수로 만들어버림. 항상 그 값으로 고정해버리는 것.
 *   즉, 한번 설정한 값을 고정시키고 추후 변동을 막는 코드인 것. ex) final double PI = 3.14;
 *   클래스 영역 내의 상수 영역에 값이 복사, 객체나 메서드가 사라질 경우에도 ㅅ호출이 가능함
   
   - 메서드명:
    	: 메서드명 앞에 final이 붙게 되면 더이상 오버라이딩을 할 수 없게 됨. 오버라이딩 자체가 자식 개체가
    	  부모 등골에 올라타서 해당 값을 바꿔서 단물을 빨아먹는 기능인데, final이라는 매서드에 붙게 되면
    	  해당 메서드는 상수화되어서 자식 개체의 변조가 불가능해지기 때문.
   - 클래스명 : 상속 불가능한 클래스
   			: final class A : <== 자식 클래스를 두지 않는 마지막 클래스. 대가 끊기듯이 final이 붙으면
   								  더이상 자식 개체를 가지지 못하고 홀로 존재함. 묶었네 묶었어
 */

class A1{
	int a = 3; // 필드명, 지역변수명은 소문자를 사용, 여러 문자가 이어질 경우 첫자를 대문자로 써줘야 함. 카멜 표기법
	final int B =5; 
	A1(){}
}
class A2{
	int a;
	final int B;
	A2 (){
		a = 3;
		B = 5;
	}
}
class A3{
	int a = 3;
	final int b = 5;
	A3(){
		a = 5;
		// b = 10; final 달려서 오류뜸
	}
}
class B{
	void bcd() { // 지역 변수 : 메서드에서 선언한 변수. stack 영역에 할당된 후 메서드 호출이 끝나면 지역 변수는 사라짐.
		int a = 3;
		final int B = 5; // 상수는 상수 영역에 따로 저장됨
		a = 7;
		// B = 9; 파이널 붙어서 변경 불가능
	}
}


public class FinalModifier {

	public static void main(String[] args) {

	}

}
