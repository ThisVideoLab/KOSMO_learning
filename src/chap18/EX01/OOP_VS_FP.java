package chap18.EX01;

//1. 자바는 객체지향 프로그램 (OOP): 모든 함수(메서드)는 객체 내부에 존재해야 한다. 함수는 클래스, 인터페이스
//   람다식: 자바에서 프로그래밍이 가능하도록 지원해주는 하나의 기능
//          기존의 구현된 메서드를 재정의하는 것이 아니라 구현부가 없는 메서드에 람다식으로 기능을 부여해서 자동으로 돌아가게끔 시키는 문법
//          람다식은 가능한 축약된 문법을 사용함. 생략가능한 것을 최대한 생략해서 표현함. 고로 문법이 굉장히 간결함
//          이러한 람다식은 자바에서 내부적으로 익명클래스로 변환되어 처리됨
//          람다식은 함수형 인터페이스에서 익명클래스로 변환이 가능함.
//          람다식은 함수형 인터페이스의 구현된 익명클래스를 람다식으로 축약
//   함수형 인터페이스: 인터페이스에 단 한개의 추상매서드가 정의된 인터페이스를 함수형 인터페이스라고 칭함.


@FunctionalInterface // @ : 어노테이션 @FunctionalInterface : 함수형 인터페이스임을 선언, (추상형 메서드가 1개, 이는 람다식 법칙에 따른 것)
interface A { // 함수형 인터페이스 
	void abc(); // interface의 멤버에 붙는 public abstract 생략됨
}

// 인터페이스의 정의된 메서드를 구현하는 방법 1 : 인터페이스의 메서드를 구현하는 클래스를 생성.
class B implements A{

	@Override
	public void abc() {
		System.out.println("메서드 내용 1");
	}
}
 


public class OOP_VS_FP {
	public static void main(String[] args) {

	//자바는 객체지향 프로그래밍이므로 모든 함수 (메서드)는 클래스 내부에 있음. 객체 생성을 하면 호출되며, 객체 생성 없이 함수명만으로 호출은 불가능함.
	
	//1. 객체 지향 프로그래밍 문법 : a) class를 생성해서 사용하는 방법 
								//-> 즉 클래스를 반드시 만들어줘야 함. 모든 메서드는 객체 내부에 존재해야 하니까.
	A a1 = new B();
	a1.abc();
	
	//2. 객체 지향 프로그래밍 문법 : b) 익명 이너 클래스를 생성해서 사용 
	// A a2 = new A();// A 는 인터페이스이기 때문에 이 자체로는 객체 생성이 불가능함.
	A a2 = new A() {
		@Override
		public void abc(){
			System.out.println("익명 내부 메서드 내용 2");
		}
	};
	a2.abc(); // OOP는 객체 생성 후 메서드 호출
		
	//3. 람다식(함수적) 프로그래밍 문법 (람다식) (case 3)
	
	A a3 = () -> {System.out.println("람다식 메서드 내용 3");}; // 람다식 표현. 클래스랑 참조변수만 딱 써준 다음에 어차피 메서드 하나니까 딱 그안에 들어갈 내용만 넣어버림
	a3.abc();
	
	A a4 = () -> {System.out.println("람다식 메서드 내용 4");}; //
	a4.abc();
		
		
	//문서의 끝
	}
}
